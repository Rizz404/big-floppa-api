Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _passportgoogleoauth20=require("passport-google-oauth20");const _Userentity=require("../entity/User.entity");const _datasource=_interop_require_default(require("../config/data-source"));function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}const options={clientID:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET,authorizationURL:process.env.AUTHORIZATION_URL,tokenURL:process.env.TOKEN_URL,callbackURL:process.env.CALLBACK_URL,scope:["profile","email"]};const googleOauth2Strategy=passport=>{passport.use(new _passportgoogleoauth20.Strategy(options,async(_accessToken,_refreshToken,profile,cb)=>{try{console.log(profile);const userRepository=_datasource.default.getRepository(_Userentity.User);let user=await userRepository.findOne({where:{oauthId:profile.id}});if(!user){user=userRepository.create({oauthId:profile.id,username:`${profile._json.given_name}_${crypto.randomUUID()}`,email:profile._json.email,isOauth:true});await userRepository.save(user)}cb(null,user)}catch(error){cb(error,false)}}))};const _default=googleOauth2Strategy;
//# sourceMappingURL=google.oauth2.strategy.js.map