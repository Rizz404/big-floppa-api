{"version":3,"sources":["../../src/strategies/google.oauth2.strategy.ts"],"sourcesContent":["import {\r\n  Strategy as GoogleOauth2Strategy,\r\n  StrategyOptions,\r\n} from \"passport-google-oauth20\";\r\nimport { PassportStatic } from \"passport\";\r\nimport { User } from \"../entity/User.entity\";\r\nimport myDataSource from \"../config/data-source\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nconst options: StrategyOptions = {\r\n  clientID: process.env.GOOGLE_CLIENT_ID!,\r\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n  authorizationURL: process.env.AUTHORIZATION_URL!,\r\n  tokenURL: process.env.TOKEN_URL!,\r\n  callbackURL: process.env.CALLBACK_URL!,\r\n  scope: [\"profile\", \"email\"],\r\n};\r\n\r\nconst googleOauth2Strategy = (passport: PassportStatic) => {\r\n  passport.use(\r\n    new GoogleOauth2Strategy(\r\n      options,\r\n      async (_accessToken, _refreshToken, profile, cb) => {\r\n        try {\r\n          console.log(profile);\r\n          const userRepository = myDataSource.getRepository(User);\r\n          let user = await userRepository.findOne({\r\n            where: { oauthId: profile.id },\r\n          });\r\n\r\n          if (!user) {\r\n            user = userRepository.create({\r\n              oauthId: profile.id,\r\n              username: `${profile._json.given_name}_${crypto.randomUUID()}`,\r\n              email: profile._json.email,\r\n              isOauth: true,\r\n            });\r\n            await userRepository.save(user);\r\n          }\r\n\r\n          cb(null, user);\r\n        } catch (error) {\r\n          cb(error, false);\r\n        }\r\n      }\r\n    )\r\n  );\r\n};\r\n\r\nexport default googleOauth2Strategy;\r\n"],"names":["options","clientID","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","authorizationURL","AUTHORIZATION_URL","tokenURL","TOKEN_URL","callbackURL","CALLBACK_URL","scope","googleOauth2Strategy","passport","use","GoogleOauth2Strategy","_accessToken","_refreshToken","profile","cb","console","log","userRepository","myDataSource","getRepository","User","user","findOne","where","oauthId","id","create","username","_json","given_name","crypto","randomUUID","email","isOauth","save","error"],"mappings":"uFAiDA,iDAAA,iDA9CO,qDAEc,4EACI,8GAGzB,MAAMA,QAA2B,CAC/BC,SAAUC,QAAQC,GAAG,CAACC,gBAAgB,CACtCC,aAAcH,QAAQC,GAAG,CAACG,oBAAoB,CAC9CC,iBAAkBL,QAAQC,GAAG,CAACK,iBAAiB,CAC/CC,SAAUP,QAAQC,GAAG,CAACO,SAAS,CAC/BC,YAAaT,QAAQC,GAAG,CAACS,YAAY,CACrCC,MAAO,CAAC,UAAW,QAAQ,AAC7B,EAEA,MAAMC,qBAAuB,AAACC,WAC5BA,SAASC,GAAG,CACV,IAAIC,+BAAoB,CACtBjB,QACA,MAAOkB,aAAcC,cAAeC,QAASC,MAC3C,GAAI,CACFC,QAAQC,GAAG,CAACH,SACZ,MAAMI,eAAiBC,mBAAY,CAACC,aAAa,CAACC,gBAAI,EACtD,IAAIC,KAAO,MAAMJ,eAAeK,OAAO,CAAC,CACtCC,MAAO,CAAEC,QAASX,QAAQY,EAAE,AAAC,CAC/B,GAEA,GAAI,CAACJ,KAAM,CACTA,KAAOJ,eAAeS,MAAM,CAAC,CAC3BF,QAASX,QAAQY,EAAE,CACnBE,SAAU,CAAC,EAAEd,QAAQe,KAAK,CAACC,UAAU,CAAC,CAAC,EAAEC,OAAOC,UAAU,GAAG,CAAC,CAC9DC,MAAOnB,QAAQe,KAAK,CAACI,KAAK,CAC1BC,QAAS,IACX,EACA,OAAMhB,eAAeiB,IAAI,CAACb,KAC5B,CAEAP,GAAG,KAAMO,KACX,CAAE,MAAOc,MAAO,CACdrB,GAAGqB,MAAO,MACZ,CACF,GAGN,QAEA,SAAe5B"}