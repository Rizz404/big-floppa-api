Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _passport=_interop_require_default(require("passport"));const _passportlocal=require("passport-local");const _Userentity=require("../entity/User.entity");const _datasource=_interop_require_default(require("../config/data-source"));const _bcrypt=_interop_require_default(require("bcrypt"));function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}_passport.default.serializeUser((user,done)=>{done(null,user.id)});_passport.default.deserializeUser(async(id,done)=>{try{const userRepository=_datasource.default.getRepository(_Userentity.User);const user=await userRepository.findOne({where:{id}});if(!user){throw new Error("User not found")}done(null,user)}catch(error){done(error,null)}});const localStrategy=passport=>{passport.use(new _passportlocal.Strategy(async(username,password,done)=>{try{const userRepository=_datasource.default.getRepository(_Userentity.User);const user=await userRepository.findOne({where:{username}});if(!user){throw new Error("User not found")}const passwordMatch=await _bcrypt.default.compare(password,user.password);if(!passwordMatch){throw new Error("Password not match")}done(null,user)}catch(error){done(error,false)}}))};const _default=localStrategy;
//# sourceMappingURL=local.strategy.js.map