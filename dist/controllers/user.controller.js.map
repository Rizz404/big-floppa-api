{"version":3,"sources":["../../src/controllers/user.controller.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport bcrypt from \"bcrypt\";\r\n\r\nimport myDataSource from \"../config/data-source\";\r\nimport getErrorMessage from \"../utils/getErrorMessage\";\r\nimport { User, UserRole } from \"../entity/User.entity\";\r\nimport { Profile } from \"../entity/Profile.entity\";\r\nimport { RequestHandler } from \"express-serve-static-core\";\r\nimport BaseReqQuery from \"../helpers/base.req.query.type\";\r\nimport paginatedResponse from \"../utils/paginatedResponse\";\r\n\r\ninterface UserQuery extends BaseReqQuery {\r\n  role?: UserRole;\r\n  isOauth?: boolean;\r\n  isVerified?: boolean;\r\n}\r\n\r\nclass UserController {\r\n  private userRepository = myDataSource.getRepository(User);\r\n  private profileRepository = myDataSource.getRepository(Profile);\r\n\r\n  public createUser = async (req: Request, res: Response) => {\r\n    try {\r\n      const { password, ...rest }: Partial<User> = req.body;\r\n\r\n      const usersCount = await this.userRepository.count();\r\n\r\n      const salt = await bcrypt.genSalt();\r\n      const hashedPassword = await bcrypt.hash(password!, salt);\r\n\r\n      const newUser = this.userRepository.create({\r\n        ...rest,\r\n        password: hashedPassword,\r\n      });\r\n\r\n      if (usersCount === 0) {\r\n        // ! ini isi objek bukan perbandingan inget itu\r\n        newUser.role = UserRole.ADMIN;\r\n      }\r\n\r\n      const savedUser = await this.userRepository.save(newUser);\r\n\r\n      const newProfile = this.profileRepository.create({ user: savedUser });\r\n\r\n      await this.profileRepository.save(newProfile);\r\n      res\r\n        .status(201)\r\n        .json({ message: \"User created successfully\", data: newUser });\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n\r\n  public getUsers = async (req: Request, res: Response) => {\r\n    try {\r\n      const {\r\n        page = \"1\",\r\n        limit = \"10\",\r\n        order,\r\n        role,\r\n        isOauth,\r\n        isVerified,\r\n      } = req.query as unknown as UserQuery;\r\n      const skip = (+page - 1) * +limit;\r\n\r\n      const totalData = await this.userRepository.count();\r\n      const users = await this.userRepository.find({\r\n        where: { role, isOauth, isVerified },\r\n        take: +limit,\r\n        skip: skip,\r\n        relations: { profile: true },\r\n        order: { createdAt: order },\r\n      });\r\n      const response = paginatedResponse(users, +page, +limit, totalData);\r\n\r\n      res.json(response);\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n\r\n  public getUserById = async (req: Request, res: Response) => {\r\n    try {\r\n      const { userId } = req.params;\r\n      const user = await this.userRepository.findOne({\r\n        where: { id: userId },\r\n        relations: { profile: true },\r\n      });\r\n\r\n      if (!user) {\r\n        return res.status(404).json({ message: \"User not found\" });\r\n      }\r\n\r\n      res.json(user);\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n\r\n  public updateUserProfile = async (req: Request, res: Response) => {\r\n    try {\r\n      const { id, profile } = req.user!;\r\n      const {\r\n        username,\r\n        email,\r\n        firstname,\r\n        lastname,\r\n        profilePicture,\r\n        gender,\r\n        age,\r\n        phoneNumber,\r\n        bio,\r\n      }: Partial<User> & Partial<Profile> = req.body;\r\n\r\n      await this.userRepository.update(id, { username, email });\r\n\r\n      await this.profileRepository.update(profile.id, {\r\n        firstname,\r\n        lastname,\r\n        profilePicture,\r\n        gender,\r\n        age,\r\n        phoneNumber,\r\n        bio,\r\n      });\r\n\r\n      const updatedUser = await this.userRepository.findOne({\r\n        where: { id },\r\n        relations: { profile: true },\r\n      });\r\n\r\n      res.json({ message: \"User and profile updated\", data: updatedUser });\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n\r\n  public updateUserRole: RequestHandler = async (req, res) => {\r\n    try {\r\n      const { userId } = req.params;\r\n      const { role }: Pick<User, \"role\"> = req.body;\r\n\r\n      await this.userRepository.update(userId, { role });\r\n\r\n      const user = await this.userRepository.findOne({ where: { id: userId } });\r\n\r\n      res.json({ message: \"User role updated\", data: user });\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n\r\n  public verifiedUser: RequestHandler = async (req, res) => {\r\n    try {\r\n      const { userId } = req.params;\r\n      const user = await this.userRepository.findOne({ where: { id: userId } });\r\n\r\n      if (user?.isVerified) {\r\n        await this.userRepository.update(userId, { isVerified: false });\r\n      } else {\r\n        await this.userRepository.update(userId, { isVerified: true });\r\n      }\r\n\r\n      const updatedUser = await this.userRepository.findOne({\r\n        where: { id: userId },\r\n      });\r\n\r\n      res.json({ message: \"User verify updated\", data: updatedUser });\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n\r\n  public updateUserPassword = async (req: Request, res: Response) => {\r\n    try {\r\n      const { userId } = req.params;\r\n      const { oldPassword, newPassword } = req.body;\r\n      const user = await this.userRepository.findOne({\r\n        where: { id: userId },\r\n      });\r\n\r\n      if (!user) {\r\n        return res.status(404).json({ message: \"User not found\" });\r\n      }\r\n\r\n      if (user.isOauth) {\r\n        return res\r\n          .status(404)\r\n          .json({ message: \"Oauth doesn't include password\" });\r\n      }\r\n\r\n      const isPasswordMatch = await bcrypt.compare(oldPassword, user.password!);\r\n\r\n      if (!isPasswordMatch) {\r\n        return res.status(400).json({ message: \"Password not match\" });\r\n      }\r\n\r\n      const salt = await bcrypt.genSalt();\r\n      const hashedPassword = await bcrypt.hash(newPassword, salt);\r\n\r\n      await this.userRepository.update(userId, { password: hashedPassword });\r\n\r\n      const updatedUser = await this.userRepository.findOne({\r\n        where: { id: userId },\r\n      });\r\n\r\n      res.json({ message: \"User updated\", data: updatedUser });\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n\r\n  public deleteUserById = async (req: Request, res: Response) => {\r\n    try {\r\n      const { userId } = req.params;\r\n      const deletedUser = await this.userRepository.delete(userId);\r\n\r\n      res.json({ message: \"User deleted\", data: deletedUser });\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n}\r\n\r\nexport default new UserController();\r\n"],"names":["UserController","userRepository","myDataSource","getRepository","User","profileRepository","Profile","createUser","req","res","password","rest","body","usersCount","count","salt","bcrypt","genSalt","hashedPassword","hash","newUser","create","role","UserRole","ADMIN","savedUser","save","newProfile","user","status","json","message","data","error","getErrorMessage","getUsers","page","limit","order","isOauth","isVerified","query","skip","totalData","users","find","where","take","relations","profile","createdAt","response","paginatedResponse","getUserById","userId","params","findOne","id","updateUserProfile","username","email","firstname","lastname","profilePicture","gender","age","phoneNumber","bio","update","updatedUser","updateUserRole","verifiedUser","updateUserPassword","oldPassword","newPassword","isPasswordMatch","compare","deleteUserById","deletedUser","delete"],"mappings":"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"}