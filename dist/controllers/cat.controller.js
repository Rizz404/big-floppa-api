Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _datasource=_interop_require_default(require("../config/data-source"));const _getErrorMessage=_interop_require_default(require("../utils/getErrorMessage"));const _Catentity=require("../entity/Cat.entity");const _paginatedResponse=_interop_require_default(require("../utils/paginatedResponse"));function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}class CatController{catRepostory=_datasource.default.getRepository(_Catentity.Cat);createCat=async(req,res)=>{try{const catData=req.body;const newCat=this.catRepostory.create(catData);await this.catRepostory.save(newCat);res.status(201).json({message:"Cat created",data:newCat})}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}};getCats=async(req,res)=>{try{const{page=1,limit=10,order="desc",status=_Catentity.CatStatus.AVAILABLE}=req.query;const skip=(+page-1)*+limit;const totalData=await this.catRepostory.count({where:{status}});const cats=await this.catRepostory.find({where:{status},take:+limit,skip,order:{createdAt:order},relations:{user:true,catBreed:true,catPictures:true}});const response=(0,_paginatedResponse.default)(cats,+page,+limit,totalData);res.json(response)}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}};getCatById=async(req,res)=>{try{const{catId}=req.params;const cat=await this.catRepostory.findOne({where:{id:catId},relations:{user:true,catBreed:true,catPictures:true}});if(!cat){return res.status(404).json({message:"Cat not found"})}res.json(cat)}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}};updateCatById=async(req,res)=>{try{const{catId}=req.params;const catData=req.body;await this.catRepostory.update(catId,catData);const updatedCat=await this.catRepostory.findOne({where:{id:catId},relations:{user:true,catBreed:true,catPictures:true}});if(!updatedCat){return res.status(404).json({message:"Cat not found"})}res.json({message:"Cat updated",data:updatedCat})}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}};deleteCatById=async(req,res)=>{try{const{catId}=req.params;const deletedCat=await this.catRepostory.delete(catId);res.json({message:"Cat deleted",data:deletedCat})}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}}}const _default=new CatController;
//# sourceMappingURL=cat.controller.js.map