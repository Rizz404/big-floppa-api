Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _datasource=_interop_require_default(require("../config/data-source"));const _getErrorMessage=_interop_require_default(require("../utils/getErrorMessage"));const _Userentity=require("../entity/User.entity");const _bcrypt=_interop_require_default(require("bcrypt"));const _jsonwebtoken=_interop_require_default(require("jsonwebtoken"));const _Profileentity=require("../entity/Profile.entity");function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}class AuthController{userRepository=_datasource.default.getRepository(_Userentity.User);profileRepository=_datasource.default.getRepository(_Profileentity.Profile);createAccessToken=user=>{return _jsonwebtoken.default.sign({...user},process.env.ACCESS_TOKEN||"secret",{expiresIn:"7d"})};createRefreshTokenAndSetCookie=(res,userId)=>{const refreshToken=_jsonwebtoken.default.sign({id:userId},process.env.REFRESH_TOKEN||"secret",{expiresIn:"30d"});res.cookie("refreshToken",refreshToken,{httpOnly:process.env.NODE_ENV!=="development",secure:true,sameSite:"strict",maxAge:30*24*60*60*1e3})};register=async(req,res)=>{try{const{password,...rest}=req.body;const usersCount=await this.userRepository.count();const salt=await _bcrypt.default.genSalt();const hashedPassword=await _bcrypt.default.hash(password,salt);const newUser=this.userRepository.create({...rest,password:hashedPassword});if(usersCount===0){newUser.role=_Userentity.UserRole.ADMIN}const savedUser=await this.userRepository.save(newUser);const newProfile=this.profileRepository.create({user:savedUser});await this.profileRepository.save(newProfile);res.status(201).json({message:"User registered successfully",data:newUser})}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}};login=async(req,res)=>{try{const{username,email,password}=req.body;const user=await this.userRepository.findOne({where:[{username},{email}]});if(!user){return res.status(404).json({message:"User not found"})}const passwordMatch=await _bcrypt.default.compare(password,user.password);if(!passwordMatch){return res.status(401).json({message:"Password not match"})}const accessToken=this.createAccessToken(user);this.createRefreshTokenAndSetCookie(res,user.id);res.json({message:"User log-in successfully",data:user,accessToken})}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}};googleOauthLogin=async(req,res)=>{try{const user=req.user;const accessToken=this.createAccessToken(user);this.createRefreshTokenAndSetCookie(res,user.id);res.json({message:"OAuth2 login with google successful",data:req.user,accessToken})}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}};refresh=async(req,res)=>{try{const{refreshToken}=req.cookies;if(!refreshToken){return res.status(401).json({message:"Unautorized"})}const decoded=_jsonwebtoken.default.verify(refreshToken,process.env.REFRESH_TOKEN||"secret");if(!decoded||!decoded.id){return res.status(401).json({message:"Invalid token"})}const user=await this.userRepository.findOne({where:{id:decoded.id}});if(!user){return res.status(400).json({message:"User not found"})}const newAccessToken=_jsonwebtoken.default.sign({...user},process.env.ACCESS_TOKEN||"secret",{expiresIn:"7d"});res.json({message:"Refresh token successful",token:newAccessToken})}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}};logout=async(req,res)=>{try{const{refreshToken}=req.cookies;const{isOauth}=req.user;if(!refreshToken)return res.status(204).json({message:"No content"});if(!isOauth){res.clearCookie("refreshToken",{httpOnly:true,sameSite:"strict",secure:true});res.json({message:"Logout Successfully"})}else{const googleLogoutUrl=`https://accounts.google.com/logout`;res.clearCookie("refreshToken",{httpOnly:true,sameSite:"strict",secure:true});res.redirect(googleLogoutUrl)}}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}}}const _default=new AuthController;
//# sourceMappingURL=auth.controller.js.map