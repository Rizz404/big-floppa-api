Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _datasource=_interop_require_default(require("../config/data-source"));const _getErrorMessage=_interop_require_default(require("../utils/getErrorMessage"));const _CatBreedentity=require("../entity/CatBreed.entity");const _paginatedResponse=_interop_require_default(require("../utils/paginatedResponse"));function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}class CatBreedController{catBreedRepostory=_datasource.default.getRepository(_CatBreedentity.CatBreed);createCatBreed=async(req,res)=>{try{const catBreedData=req.body;const newCatBreed=this.catBreedRepostory.create(catBreedData);await this.catBreedRepostory.save(newCatBreed);res.status(201).json({message:"Cat race created",data:newCatBreed})}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}};getCatBreeds=async(req,res)=>{try{const{page=1,limit=10,order="desc"}=req.query;const skip=(+page-1)*+limit;const totalData=await this.catBreedRepostory.count();const catBreeds=await this.catBreedRepostory.find({take:+limit,skip,order:{createdAt:order},relations:{author:true}});const response=(0,_paginatedResponse.default)(catBreeds,+page,+limit,totalData);res.json(response)}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}};getCatBreedById=async(req,res)=>{try{const{catBreedId}=req.params;const catBreed=await this.catBreedRepostory.findOne({where:{id:catBreedId},relations:{author:true}});if(!catBreed){return res.status(404).json({message:"Cat race not found"})}res.json(catBreed)}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}};updateCatBreedById=async(req,res)=>{try{const{id}=req.user;const{catBreedId}=req.params;const catBreedData=req.body;await this.catBreedRepostory.update(catBreedId,{author:{id},...catBreedData});const updatedCatBreed=await this.catBreedRepostory.findOne({where:{id:catBreedId},relations:{author:true}});if(!updatedCatBreed){return res.status(404).json({message:"Cat race not found"})}res.json({message:"Cat race updated",data:updatedCatBreed})}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}};deleteCatBreedById=async(req,res)=>{try{const{catBreedId}=req.params;const deletedCatBreed=await this.catBreedRepostory.delete(catBreedId);res.json({message:"Cat race deleted",data:deletedCatBreed})}catch(error){res.status(500).json({message:(0,_getErrorMessage.default)(error)})}}}const _default=new CatBreedController;
//# sourceMappingURL=catBreed.controller.js.map