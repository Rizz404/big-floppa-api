{"version":3,"sources":["../../src/controllers/auth.controller.ts"],"sourcesContent":["import { Request, RequestHandler, Response } from \"express\";\r\nimport myDataSource from \"../config/data-source\";\r\nimport getErrorMessage from \"../utils/getErrorMessage\";\r\nimport { User, UserRole } from \"../entity/User.entity\";\r\nimport bcrypt from \"bcrypt\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { Profile } from \"../entity/Profile.entity\";\r\n\r\nclass AuthController {\r\n  private userRepository = myDataSource.getRepository(User);\r\n  private profileRepository = myDataSource.getRepository(Profile);\r\n\r\n  private createAccessToken = (user: User) => {\r\n    return jwt.sign({ ...user }, process.env.ACCESS_TOKEN || \"secret\", {\r\n      expiresIn: \"7d\",\r\n    });\r\n  };\r\n\r\n  private createRefreshTokenAndSetCookie = (res: Response, userId: string) => {\r\n    const refreshToken = jwt.sign(\r\n      { id: userId },\r\n      process.env.REFRESH_TOKEN || \"secret\",\r\n      {\r\n        expiresIn: \"30d\",\r\n      }\r\n    );\r\n\r\n    res.cookie(\"refreshToken\", refreshToken, {\r\n      httpOnly: process.env.NODE_ENV !== \"development\",\r\n      secure: true,\r\n      sameSite: \"strict\",\r\n      maxAge: 30 * 24 * 60 * 60 * 1000, // * 30 hari\r\n    });\r\n  };\r\n\r\n  public register = async (req: Request, res: Response) => {\r\n    try {\r\n      const { password, ...rest }: Partial<User> = req.body;\r\n\r\n      const usersCount = await this.userRepository.count();\r\n\r\n      const salt = await bcrypt.genSalt();\r\n      const hashedPassword = await bcrypt.hash(password!, salt);\r\n\r\n      const newUser = this.userRepository.create({\r\n        ...rest,\r\n        password: hashedPassword,\r\n      });\r\n\r\n      if (usersCount === 0) {\r\n        // ! ini isi objek bukan perbandingan inget itu\r\n        newUser.role = UserRole.ADMIN;\r\n      }\r\n\r\n      const savedUser = await this.userRepository.save(newUser);\r\n\r\n      const newProfile = this.profileRepository.create({ user: savedUser });\r\n\r\n      await this.profileRepository.save(newProfile);\r\n      res\r\n        .status(201)\r\n        .json({ message: \"User registered successfully\", data: newUser });\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n\r\n  public login = async (req: Request, res: Response) => {\r\n    try {\r\n      const { username, email, password } = req.body;\r\n      const user = await this.userRepository.findOne({\r\n        where: [{ username }, { email }],\r\n      });\r\n\r\n      if (!user) {\r\n        return res.status(404).json({ message: \"User not found\" });\r\n      }\r\n\r\n      const passwordMatch = await bcrypt.compare(password, user.password!);\r\n\r\n      if (!passwordMatch) {\r\n        return res.status(401).json({ message: \"Password not match\" });\r\n      }\r\n\r\n      const accessToken = this.createAccessToken(user);\r\n\r\n      this.createRefreshTokenAndSetCookie(res, user.id);\r\n      res.json({\r\n        message: \"User log-in successfully\",\r\n        data: user,\r\n        accessToken,\r\n      });\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n\r\n  public googleOauthLogin: RequestHandler = async (req, res) => {\r\n    try {\r\n      const user = req.user!;\r\n\r\n      const accessToken = this.createAccessToken(user);\r\n\r\n      this.createRefreshTokenAndSetCookie(res, user.id);\r\n      res.json({\r\n        message: \"OAuth2 login with google successful\",\r\n        data: req.user,\r\n        accessToken,\r\n      });\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n\r\n  public refresh: RequestHandler = async (req, res) => {\r\n    try {\r\n      const { refreshToken } = req.cookies;\r\n\r\n      if (!refreshToken) {\r\n        return res.status(401).json({ message: \"Unautorized\" });\r\n      }\r\n\r\n      const decoded = jwt.verify(\r\n        refreshToken,\r\n        process.env.REFRESH_TOKEN || \"secret\"\r\n      ) as { id: string };\r\n\r\n      if (!decoded || !decoded.id) {\r\n        return res.status(401).json({ message: \"Invalid token\" });\r\n      }\r\n\r\n      const user = await this.userRepository.findOne({\r\n        where: { id: decoded.id },\r\n      });\r\n\r\n      if (!user) {\r\n        return res.status(400).json({ message: \"User not found\" });\r\n      }\r\n\r\n      const newAccessToken = jwt.sign(\r\n        { ...user },\r\n        process.env.ACCESS_TOKEN || \"secret\",\r\n        { expiresIn: \"7d\" }\r\n      );\r\n\r\n      res.json({ message: \"Refresh token successful\", token: newAccessToken });\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n\r\n  public logout: RequestHandler = async (req, res) => {\r\n    try {\r\n      const { refreshToken } = req.cookies;\r\n      const { isOauth } = req.user!;\r\n\r\n      if (!refreshToken) return res.status(204).json({ message: \"No content\" });\r\n      if (!isOauth) {\r\n        res.clearCookie(\"refreshToken\", {\r\n          httpOnly: true,\r\n          sameSite: \"strict\",\r\n          secure: true,\r\n        });\r\n        res.json({ message: \"Logout Successfully\" });\r\n      } else {\r\n        const googleLogoutUrl = `https://accounts.google.com/logout`;\r\n        res.clearCookie(\"refreshToken\", {\r\n          httpOnly: true,\r\n          sameSite: \"strict\",\r\n          secure: true,\r\n        });\r\n        res.redirect(googleLogoutUrl);\r\n      }\r\n    } catch (error) {\r\n      res.status(500).json({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n}\r\n\r\nexport default new AuthController();\r\n"],"names":["AuthController","userRepository","myDataSource","getRepository","User","profileRepository","Profile","createAccessToken","user","jwt","sign","process","env","ACCESS_TOKEN","expiresIn","createRefreshTokenAndSetCookie","res","userId","refreshToken","id","REFRESH_TOKEN","cookie","httpOnly","NODE_ENV","secure","sameSite","maxAge","register","req","password","rest","body","usersCount","count","salt","bcrypt","genSalt","hashedPassword","hash","newUser","create","role","UserRole","ADMIN","savedUser","save","newProfile","status","json","message","data","error","getErrorMessage","login","username","email","findOne","where","passwordMatch","compare","accessToken","googleOauthLogin","refresh","cookies","decoded","verify","newAccessToken","token","logout","isOauth","clearCookie","googleLogoutUrl","redirect"],"mappings":"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"}