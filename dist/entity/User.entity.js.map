{"version":3,"sources":["../../src/entity/User.entity.ts"],"sourcesContent":["import {\r\n  Entity,\r\n  Column,\r\n  PrimaryGeneratedColumn,\r\n  CreateDateColumn,\r\n  UpdateDateColumn,\r\n  Index,\r\n  OneToOne,\r\n  JoinColumn,\r\n  OneToMany,\r\n} from \"typeorm\";\r\nimport { Profile } from \"./Profile.entity\";\r\nimport { Cat } from \"./Cat.entity\";\r\nimport { CatBreed } from \"./CatBreed.entity\";\r\nimport { UserAddress } from \"./UserAddress.entity\";\r\nimport { Cart } from \"./Cart.entity\";\r\nimport { Transaction } from \"./Transaction.entity\";\r\nimport { Order } from \"./Order.entity\";\r\n\r\n// * Urutannya migration:generate terus migration:run terus migration:create\r\n\r\nexport enum UserRole {\r\n  ADMIN = \"ADMIN\",\r\n  USER = \"USER\",\r\n}\r\n\r\n@Entity()\r\nexport class User {\r\n  @PrimaryGeneratedColumn(\"uuid\")\r\n  id: string;\r\n\r\n  @Index({ unique: true })\r\n  @Column({ type: \"varchar\", nullable: true })\r\n  oauthId?: string;\r\n\r\n  // * Kalau ada index dan true bersamaan usahakan di decorator saja\r\n  @Index({ unique: true })\r\n  @Column({ type: \"varchar\", length: 50 })\r\n  username: string;\r\n\r\n  @Index({ unique: true })\r\n  @Column({ type: \"varchar\" })\r\n  email: string;\r\n\r\n  @Column({ type: \"varchar\", nullable: true, length: 255 })\r\n  password?: string;\r\n\r\n  @Column({\r\n    type: \"enum\",\r\n    enum: UserRole,\r\n    default: UserRole.USER,\r\n  })\r\n  role: UserRole;\r\n\r\n  @Column({ type: \"bool\", default: false })\r\n  isOauth: boolean;\r\n\r\n  @Column({ type: \"date\", nullable: true })\r\n  lastLogin?: Date;\r\n\r\n  @Column({ type: \"bool\", default: false })\r\n  isVerified: boolean;\r\n\r\n  @CreateDateColumn()\r\n  createdAt: Date;\r\n\r\n  @UpdateDateColumn()\r\n  updatedAt: Date;\r\n\r\n  @OneToMany(() => UserAddress, (userAddres) => userAddres.user)\r\n  userAddreses: UserAddress[];\r\n\r\n  // * Relasi one to one begini\r\n  @OneToOne(() => Profile, (profile) => profile.user)\r\n  profile: Profile;\r\n\r\n  @OneToOne(() => Cart, (cart) => cart.user)\r\n  cart: Cart;\r\n\r\n  @OneToMany(() => Cat, (cat) => cat.user)\r\n  cats: Cat[];\r\n\r\n  @OneToMany(() => CatBreed, (catBreed) => catBreed.author)\r\n  catBreeds: CatBreed[];\r\n\r\n  @OneToMany(() => Transaction, (transaction) => transaction.buyer)\r\n  buyerTransactions: Transaction[];\r\n\r\n  @OneToMany(() => Transaction, (transaction) => transaction.seller)\r\n  sellerTransactions: Transaction[];\r\n\r\n  @OneToMany(() => Order, (order) => order.user)\r\n  orders: Order[];\r\n}\r\n"],"names":["User","UserRole","id","oauthId","username","email","password","role","isOauth","lastLogin","isVerified","createdAt","updatedAt","userAddreses","profile","cart","cats","catBreeds","buyerTransactions","sellerTransactions","orders","unique","type","nullable","length","enum","default","UserAddress","userAddres","user","Profile","Cart","Cat","cat","CatBreed","catBreed","author","Transaction","transaction","buyer","seller","Order","order"],"mappings":"8LA2BaA,IAAI,mBAAJA,oEAjBN,wCACiB,6CACJ,8CACK,sDACG,kDACP,kDACO,mDACN,2dAIVC,8DAAAA,WAAAA,aAML,OAAMD,KACX,AACAE,EAAW,AAEX,CAEAC,OAAiB,AAGjB,CAEAC,QAAiB,AAEjB,CAEAC,KAAc,AAEd,CACAC,QAAkB,AAElB,CAKAC,IAAe,AAEf,CACAC,OAAiB,AAEjB,CACAC,SAAiB,AAEjB,CACAC,UAAoB,AAEpB,CACAC,SAAgB,AAEhB,CACAC,SAAgB,AAEhB,CACAC,YAA4B,AAG5B,CACAC,OAAiB,AAEjB,CACAC,IAAW,AAEX,CACAC,IAAY,AAEZ,CACAC,SAAsB,AAEtB,CACAC,iBAAiC,AAEjC,CACAC,kBAAkC,AAElC,CACAC,MAAgB,AAClB,0HA9DWC,OAAQ,4BACPC,KAAM,UAAWC,SAAU,2EAI5BF,OAAQ,4BACPC,KAAM,UAAWE,OAAQ,0EAG1BH,OAAQ,4BACPC,KAAM,+EAGNA,KAAM,UAAWC,SAAU,KAAMC,OAAQ,4EAIjDF,KAAM,OACNG,KAAMxB,SACNyB,OAAO,4EAICJ,KAAM,OAAQI,QAAS,6EAGvBJ,KAAM,OAAQC,SAAU,8EAGxBD,KAAM,OAAQI,QAAS,0PAShBC,8BAAW,CAAGC,YAAeA,WAAWC,IAAI,iFAI7CC,sBAAO,CAAGhB,SAAYA,QAAQe,IAAI,4EAGlCE,gBAAI,CAAGhB,MAASA,KAAKc,IAAI,0EAGxBG,cAAG,CAAGC,KAAQA,IAAIJ,IAAI,0EAGtBK,wBAAQ,CAAGC,UAAaA,SAASC,MAAM,+EAGvCC,8BAAW,CAAGC,aAAgBA,YAAYC,KAAK,uFAG/CF,8BAAW,CAAGC,aAAgBA,YAAYE,MAAM,wFAGhDC,kBAAK,CAAGC,OAAUA,MAAMb,IAAI"}