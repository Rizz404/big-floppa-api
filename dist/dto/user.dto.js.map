{"version":3,"sources":["../../src/dto/user.dto.ts"],"sourcesContent":["import BaseQueryDto from \"../utils/base.query.dto\";\r\nimport {\r\n  IsEmail,\r\n  IsNotEmpty,\r\n  Length,\r\n  IsOptional,\r\n  ValidateIf,\r\n  IsIn,\r\n  IsBooleanString,\r\n  IsEnum,\r\n} from \"class-validator\";\r\nimport { UpdateProfileDto } from \"./profile.dto\";\r\nimport { UserRole } from \"../entity/User.entity\";\r\n\r\nexport class CreateUserDto {\r\n  @IsNotEmpty({ message: \"Username is required\" })\r\n  @Length(4, 20, { message: \"Username must be between 4 and 20 characters\" })\r\n  username: string;\r\n\r\n  @IsNotEmpty({ message: \"Email is required\" })\r\n  @IsEmail({}, { message: \"Invalid email format\" })\r\n  email: string;\r\n\r\n  @IsOptional()\r\n  @Length(6, 100, { message: \"Password must be between 6 and 100 characters\" })\r\n  password?: string;\r\n}\r\n\r\nexport class LoginDto {\r\n  @ValidateIf((o) => !o.email) // * Validasi hanya jika email tidak diisi\r\n  @IsNotEmpty({ message: \"Username is required\" })\r\n  @Length(4, 20, { message: \"Username must be between 4 and 20 characters\" })\r\n  username: string;\r\n\r\n  @ValidateIf((o) => !o.username) // * Validasi hanya jika username tidak diisi\r\n  @IsNotEmpty({ message: \"Email is required\" })\r\n  @IsEmail({}, { message: \"Invalid email format\" })\r\n  email: string;\r\n\r\n  @IsNotEmpty({ message: \"Password is required\" })\r\n  @Length(6, 100, { message: \"Password must be between 6 and 100 characters\" })\r\n  password?: string;\r\n}\r\n\r\nexport class UpdateUserDto extends UpdateProfileDto {\r\n  @IsOptional()\r\n  @IsNotEmpty({ message: \"Username is required\" })\r\n  @Length(4, 20, { message: \"Username must be between 4 and 20 characters\" })\r\n  username?: string;\r\n\r\n  @IsOptional()\r\n  @IsNotEmpty({ message: \"Email is required\" })\r\n  @IsEmail({}, { message: \"Invalid email format\" })\r\n  email?: string;\r\n}\r\n\r\nexport class UpdateUserPasswordDto {\r\n  @IsNotEmpty({ message: \"Old password is required\" })\r\n  @Length(6, 100, {\r\n    message: \"Old password must be between 6 and 100 characters\",\r\n  })\r\n  oldPassword?: string;\r\n\r\n  @IsNotEmpty({ message: \"New password is required\" })\r\n  @Length(6, 100, {\r\n    message: \"NewPassword password must be between 6 and 100 characters\",\r\n  })\r\n  newPassword?: string;\r\n}\r\n\r\nexport class UpdateUserRoleDto {\r\n  @IsNotEmpty()\r\n  @IsEnum(UserRole, { message: \"Role must be admin or user\" })\r\n  role: string;\r\n}\r\n\r\nexport class UserQueryDto extends BaseQueryDto {\r\n  @IsOptional()\r\n  @IsEnum(UserRole, { message: \"Role must be admin or user\" })\r\n  role?: string;\r\n\r\n  @IsBooleanString()\r\n  @IsOptional()\r\n  isOauth?: string;\r\n\r\n  @IsBooleanString()\r\n  @IsOptional()\r\n  isVerified?: string;\r\n}\r\n"],"names":["CreateUserDto","LoginDto","UpdateUserDto","UpdateUserPasswordDto","UpdateUserRoleDto","UserQueryDto","username","email","password","message","o","UpdateProfileDto","oldPassword","newPassword","role","BaseQueryDto","isOauth","isVerified"],"mappings":"8LAcaA,aAAa,mBAAbA,eAcAC,QAAQ,mBAARA,UAgBAC,aAAa,mBAAbA,eAYAC,qBAAqB,mBAArBA,uBAcAC,iBAAiB,mBAAjBA,mBAMAC,YAAY,mBAAZA,qEA5EY,0DAUlB,6CAC0B,2CACR,+hBAElB,MAAML,cACX,AAEAM,QAAiB,AAEjB,CAEAC,KAAc,AAEd,CAEAC,QAAkB,AACpB,+CAXgBC,QAAS,0DACNA,QAAS,2IAGZA,QAAS,sDACRA,QAAS,mJAINA,QAAS,6FAItB,OAAMR,SACX,AAGAK,QAAiB,AAEjB,CAGAC,KAAc,AAEd,CAEAC,QAAkB,AACpB,8CAbeE,GAAM,CAACA,EAAEH,KAAK,kCACbE,QAAS,0DACNA,QAAS,qIAGbC,GAAM,CAACA,EAAEJ,QAAQ,kCAChBG,QAAS,sDACRA,QAAS,2GAGVA,QAAS,2DACLA,QAAS,wFAItB,OAAMP,sBAAsBS,4BAAgB,CACjD,AAGAL,QAAkB,AAElB,CAGAC,KAAe,AACjB,gFARgBE,QAAS,0DACNA,QAAS,4KAIZA,QAAS,sDACRA,QAAS,iEAInB,OAAMN,sBACX,AAIAS,WAAqB,AAErB,CAIAC,WAAqB,AACvB,+CAXgBJ,QAAS,+DAErBA,QAAS,2JAIGA,QAAS,+DAErBA,QAAS,oHAKN,OAAML,kBACX,AAEAU,IAAa,AACf,iGAFsBL,QAAS,0EAIxB,OAAMJ,qBAAqBU,qBAAY,CAC5C,AAEAD,IAAc,AAEd,CAEAE,OAAiB,AAEjB,CAEAC,UAAoB,AACtB,iGAVsBR,QAAS"}